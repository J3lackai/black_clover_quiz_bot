from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command, CommandStart, StateFilter, F
from lexicon.lexicon_ru import LEXICON_RU
from states.states import FSMFillForm
from aiogram.fsm.context import FSMContext
from keyboards import get_answers_keyboard, main_menu, state_map

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä —É—Ä–æ–≤–Ω—è –º–æ–¥—É–ª—è
router = Router()


@router.message(StateFilter(FSMFillForm.wait_for))
async def proccess_start_command(message: Message):
    await message.answer(text=LEXICON_RU["–î–∞–≤–∞–π!"])


@router.message(StateFilter(*[s[0] for s in state_map.values()]))
async def process_question(message: Message, state: FSMContext):
    current_state = await state.get_state()
    state_name = current_state.split(":")[1]
    question_num = int(state_name[1:])
    question_key = f"q{question_num}"
    question_text = LEXICON_RU.get(question_key, "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    keyboard = get_answers_keyboard(question_num)

    await message.answer(text=question_text, reply_markup=keyboard)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    next_state = state_map[question_num][1]
    if next_state:
        await state.set_state(next_state)
    else:
        await message.answer("–ù–∞–¥–µ—é—Å—å –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –Ω–∞—à –∫–≤–∏–∑!ü§ó")
        await state.clear()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    await state.set_state(FSMFillForm.q2)


@router.message(F.text == "–ù–∞—á–∞—Ç—å –∫–≤–∏–∑ —Å–Ω–∞—á–∞–ª–∞")
async def restart_quiz(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(FSMFillForm.q1)
    await message.answer("–ö–≤–∏–∑ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è...", reply_markup=main_menu)


@router.message(F.text == "–ü–æ–º–æ—â—å")
async def help_handler(message: Message, state: FSMContext):
    await message.answer(LEXICON_RU["/help"])


@router.message(F.text == "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞")
async def donate_handler(message: Message, state: FSMContext):
    await message.answer(LEXICON_RU["/donate"])


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@router.message(CommandStart(), StateFilter(FSMFillForm.default_state))
async def process_start_command(message: Message):
    await message.answer(text=LEXICON_RU["/start"])


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help
@router.message(Command(commands="help"), StateFilter(FSMFillForm.default_state))
async def process_help_command(message: Message):
    await message.answer(text=LEXICON_RU["/help"])
